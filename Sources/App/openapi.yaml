openapi: '3.1.0'
info:
  title: VaporDemo
  version: 1.0.0
servers:
  - url: http://localhost/openapi
    description: Example service deployment.
paths:
  /json:
    get:
      operationId: getJSON
      responses:
        '200':
          description: A JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloVapor'
  /cat:
    get:
      operationId: getCat
      responses:
        '200':
          description: A Cat image.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
  /catWithChunks:
    get:
      operationId: getCatWithChunks
      responses:
        '200':
          description: A Cat image.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "The user's username"
                email:
                  type: string
                  format: email
                  description: "The user's email address"
              required:
                - username
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '500':
          description: Internal server error
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique ID of the user
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error
    put:
      summary: Update a user by ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The user's username
                email:
                  type: string
                  format: email
                  description: The user's email address
              required:
                - username
                - email
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique ID of the user
      responses:
        '204':
          description: User deleted successfully, no content returned
components:
  schemas:
    HelloVapor:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      required:
        - message
        - status
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - username
        - email
